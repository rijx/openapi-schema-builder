stages:
  - verify
  - release

build:
  stage: verify
  image: node:8.16-alpine
  script:
    - npm install
    - npm run build

test:
  stage: verify
  image: node:8.16-alpine
  script:
    - npm install
    - npm test

lint:
  stage: verify
  image: node:8.16-alpine
  script:
    - npm install
    - npm run lint

audit:
  stage: verify
  image: node:8.16-alpine
  script:
    - npm install --no-audit
    - npm audit

release initial:
  stage: release
  image: node:8.16-alpine
  only:
    - master
  script:
    - apk add --no-cache git openssh-client
    # determine latest + new version
    - git describe --abbrev=0 --tags --match v1.0.0 && exit
    # prepare SSH auth
    - eval $(ssh-agent -s)
    - cat $CI_DEPLOYMENT_KEY_FILE | ssh-add -
    # tag the version
    - TAG_NAME=v1.0.0
    - git tag $TAG_NAME
    - mkdir ~/.ssh
    - ssh-keyscan $CI_SERVER_HOST >> ~/.ssh/known_hosts
    - git push git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git $TAG_NAME

release MR:
  stage: release
  image: node:8.16-alpine
  only:
    - merge_requests
  script:
    # determine latest + new version
    - LATEST_VERSION=$(git describe --abbrev=0 --tags --match 'v*.*.*' || true)
    - VERSION_INCREMENT=$(node bin/getMRVersionIncrement)
    - VERSION=$(npx semver -i $VERSION_INCREMENT $LATEST_VERSION || echo 1.0.0)
    # prepare SSH auth
    - eval $(ssh-agent -s)
    - cat $CI_DEPLOYMENT_KEY_FILE | ssh-add -
    # tag the version
    - TAG_NAME=v$VERSION
    - git tag $TAG_NAME
    - mkdir ~/.ssh
    - ssh-keyscan $CI_SERVER_HOST >> ~/.ssh/known_hosts
    - git push git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git $TAG_NAME

release patch:
  stage: release
  image: node:8.16-alpine
  only:
    - /^release-([0-9]+).([0-9]+)$/
  except:
    - tags
  script:
    - apk add --no-cache git openssh-client
    # determine version
    - MINOR_VERSION=$(echo "$CI_COMMIT_REF_NAME" | awk -F- '{ print $2 }')
    - LATEST_VERSION=$(git tag --list "v$MINOR_VERSION.*" | tail -n 1 | awk -Fv '{ print $2 }')
    - VERSION=$([[ "$LATEST_VERSION" = "" ]] && echo "$MINOR_VERSION.0" || npx semver -i patch $LATEST_VERSION)
    # tag the version
    - TAG_NAME=v$VERSION
    - git tag $TAG_NAME
    # push to repository
    - eval $(ssh-agent -s)
    - cat $CI_DEPLOYMENT_KEY_FILE | ssh-add -
    - mkdir ~/.ssh
    - ssh-keyscan $CI_SERVER_HOST >> ~/.ssh/known_hosts
    - git push git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git $TAG_NAME

publish release:
  stage: release
  image: node:8.16-alpine
  only:
    - tags
    - /^v([0-9]+).([0-9]+).([0-9]+)$/
  script:
    - apk add --no-cache git openssh-client jq
    # set version based on tag name
    - VERSION=$(npx semver "$CI_COMMIT_TAG")
    - cat package.json | jq .version\ =\ \"$VERSION\" > package.json.new
    - mv package.json.new package.json
    # build package
    - npm install
    - npm run build
    # publish package to npm
    - echo "//registry.npmjs.org/:_authToken=$NPM_PUBLISH_TOKEN" > .npmrc
    - npm publish
    # create maintenance branch if it doesn't exist yet
    - BRANCH_NAME=v$(echo $VERSION | awk -F. '{ print $1 "." $2 }')
    - git branch $BRANCH_NAME
    - mkdir ~/.ssh
    - ssh-keyscan $CI_SERVER_HOST >> ~/.ssh/known_hosts
    - git push git@$CI_SERVER_HOST:$CI_PROJECT_PATH.git $BRANCH_NAME || true
